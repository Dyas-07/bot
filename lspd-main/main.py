import discord
from discord.ext import commands
import os
import asyncio

# Importa configura√ß√µes
from config import TOKEN, ROLE_ID

# Setup da base de dados
from database import setup_database

# Intents - Certifique-se de que estas est√£o ativadas no Discord Developer Portal!
# MESSAGE_CONTENT √© crucial para comandos de prefixo.
# MEMBERS e PRESENCES s√£o necess√°rios para cogs como status_changer e funcionalidades que interagem com membros.
intents = discord.Intents.default()
intents.members = True
intents.message_content = True
intents.reactions = True
intents.presences = True 

# Bot com prefixo "!"
bot = commands.Bot(command_prefix='!', intents=intents)

# --- COMANDO COM PREFIXO (!mascote) ---
@bot.command(name="mascote", help="Exibe a mascote atual da LSPD.")
async def hello(ctx):
    if not isinstance(ctx.author, discord.Member):
        # Em ephemeral=True, as mensagens s√≥ s√£o vis√≠veis para quem as enviou
        await ctx.send("Este comando s√≥ pode ser usado num servidor.", ephemeral=True)
        return

    # Tenta obter o cargo pelo ID configurado em config.py
    # Se ROLE_ID for None ou o cargo n√£o for encontrado, a permiss√£o ser√° negada.
    role = discord.utils.get(ctx.author.roles, id=ROLE_ID)

    if role is None:
        await ctx.send("üö´ N√£o tens permiss√µes para isso.", ephemeral=True)
    else:
        await ctx.send("A atual mascote da LSPD √© o SKIBIDI ZEKA!")

# --- NOVO COMANDO: !clear ---
@bot.command(name="clear", help="Limpa um n√∫mero especificado de mensagens no canal. Uso: !clear <quantidade>")
# @commands.has_permissions(manage_messages=True) # Removido para usar permiss√£o por cargo
async def clear_messages(ctx, amount: int):
    """
    Limpa um n√∫mero especificado de mensagens no canal onde o comando foi invocado.
    Apenas utilizadores com o cargo especificado em ROLE_ID podem usar.
    """
    # Verifica se o comando foi usado num servidor
    if not isinstance(ctx.author, discord.Member):
        await ctx.send("Este comando s√≥ pode ser usado num servidor.", ephemeral=True)
        return

    # Tenta obter o cargo pelo ID configurado em config.py
    required_role = discord.utils.get(ctx.author.roles, id=ROLE_ID)

    # Verifica se o utilizador tem o cargo necess√°rio
    if required_role is None:
        await ctx.send("üö´ N√£o tens permiss√µes para usar este comando. Requer o cargo autorizado.", ephemeral=True)
        return

    if amount <= 0:
        await ctx.send("Por favor, especifique um n√∫mero positivo de mensagens para limpar.", ephemeral=True)
        return
    
    # Defer a resposta para que o bot "pense" enquanto processa.
    # ephemeral=True para que a mensagem de defer√™ncia seja privada.
    await ctx.defer(ephemeral=True) 

    try:
        # +1 para incluir a pr√≥pria mensagem do comando !clear
        deleted = await ctx.channel.purge(limit=amount + 1)
        # Envia uma confirma√ß√£o privada para o utilizador que usou o comando
        await ctx.followup.send(f"‚úÖ Foram limpas {len(deleted) - 1} mensagens.", ephemeral=True)
        print(f"Comando !clear executado por {ctx.author.display_name}. Limpou {len(deleted) - 1} mensagens no canal {ctx.channel.name}.")
    except discord.Forbidden:
        await ctx.followup.send("‚ùå N√£o tenho permiss√£o para gerenciar mensagens neste canal. Por favor, verifique as minhas permiss√µes.", ephemeral=True)
        print(f"Erro de permiss√£o ao tentar limpar mensagens no canal {ctx.channel.name}.")
    except discord.HTTPException as e:
        await ctx.followup.send(f"‚ùå Ocorreu um erro ao tentar limpar mensagens: {e}", ephemeral=True)
        print(f"Erro HTTP ao tentar limpar mensagens no canal {ctx.channel.name}: {e}")
    except Exception as e:
        await ctx.followup.send(f"‚ùå Ocorreu um erro inesperado: {e}", ephemeral=True)
        print(f"Erro inesperado ao limpar mensagens: {e}")

# --- Evento on_ready ---
@bot.event
async def on_ready():
    print(f'‚úÖ Bot conectado como {bot.user.name} ({bot.user.id})')

    # Configura base de dados (cria tabelas se n√£o existirem)
    # IMPORTANTE: A fun√ß√£o setup_database agora cria tabelas para PostgreSQL
    setup_database()
    print('üì¶ Base de dados configurada.')

    # Carrega cogs
    cogs_folder = './cogs'
    if not os.path.exists(cogs_folder):
        print(f"‚ö†Ô∏è Pasta '{cogs_folder}' n√£o encontrada. Certifique-se de que seus cogs est√£o na subpasta 'cogs'.")
        return

    for filename in os.listdir(cogs_folder):
        # Garante que apenas ficheiros .py v√°lidos sejam carregados (ignora __init__.py e __pycache__)
        if filename.endswith('.py') and not filename.startswith('__'):
            try:
                # Carrega a extens√£o (cog)
                await bot.load_extension(f'cogs.{filename[:-3]}')
                print(f'‚úÖ Cog {filename[:-3]} carregado.')
            except Exception as e:
                print(f'‚ùå Erro ao carregar cog {filename[:-3]}: {e}')

    print('üöÄ Todos os cogs foram carregados.')
    print('------') 

    # IMPORTANTE: Se voc√™ planeja usar Slash Commands (comandos de aplica√ß√£o),
    # descomente a linha abaixo para sincroniz√°-los com o Discord.
    # Isto geralmente √© feito APENAS uma vez ap√≥s grandes mudan√ßas nos slash commands.
    # await bot.tree.sync()

# --- Executa o bot ---
if __name__ == '__main__':
    # Certifique-se de que seu DISCORD_BOT_TOKEN est√° configurado nas vari√°veis de ambiente no Railway
    if TOKEN is None:
        print("ERRO: DISCORD_BOT_TOKEN n√£o encontrado nas vari√°veis de ambiente.")
        print("Por favor, defina a vari√°vel de ambiente DISCORD_BOT_TOKEN com o token do seu bot.")
    else:
        bot.run(TOKEN)
